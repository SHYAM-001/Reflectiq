// Daily puzzle generation API routes following Devvit Web patterns\n// All endpoints must start with /api/ as per Devvit requirements\n\nimport express from 'express';\nimport type { Request, Response } from 'express';\nimport { DailyPuzzleGenerator } from '../services/DailyPuzzleGenerator.js';\nimport { context } from '@devvit/web/server';\nimport type {\n  DailyPuzzleSet,\n} from '../../shared/types/index.js';\nimport type {\n  GenerationResult,\n} from '../services/DailyPuzzleGenerator.js';\n\n// Initialize daily puzzle generator\nconst dailyPuzzleGenerator = new DailyPuzzleGenerator();\n\nconst router = express.Router();\n\n// Request/Response type definitions\ninterface GenerateDailyPuzzlesRequest {\n  date?: string; // YYYY-MM-DD format\n  force?: boolean; // Force regeneration even if puzzles exist\n}\n\ninterface GenerateDailyPuzzlesResponse {\n  result: GenerationResult;\n  timestamp: string;\n}\n\ninterface GenerateUpcomingPuzzlesRequest {\n  days?: number;\n}\n\ninterface GenerateUpcomingPuzzlesResponse {\n  successful: number;\n  failed: number;\n  results: GenerationResult[];\n  timestamp: string;\n}\n\ninterface ScheduleGenerationResponse {\n  jobId: string;\n  schedule: string;\n  message: string;\n  timestamp: string;\n}\n\ninterface GetGenerationStatsResponse {\n  stats: {\n    totalPuzzlesGenerated: number;\n    puzzlesByDifficulty: Record<string, number>;\n    averageGenerationTime: number;\n    uniquenessRate: number;\n    lastGenerationDate: string | null;\n  };\n  timestamp: string;\n}\n\ninterface ErrorResponse {\n  error: {\n    code: string;\n    message: string;\n    details?: any;\n    timestamp: string;\n  };\n}\n\n/**\n * Generate daily puzzles for a specific date\n * POST /api/daily-puzzles/generate\n */\nrouter.post<{}, GenerateDailyPuzzlesResponse | ErrorResponse, GenerateDailyPuzzlesRequest>(\n  '/api/daily-puzzles/generate',\n  async (req: Request<{}, GenerateDailyPuzzlesResponse | ErrorResponse, GenerateDailyPuzzlesRequest>, res: Response<GenerateDailyPuzzlesResponse | ErrorResponse>) => {\n    try {\n      const { date, force = false } = req.body;\n\n      // Validate date format if provided\n      let targetDate: Date | undefined;\n      if (date) {\n        const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n        if (!dateRegex.test(date)) {\n          return res.status(400).json({\n            error: {\n              code: 'INVALID_DATE_FORMAT',\n              message: 'Date must be in YYYY-MM-DD format',\n              timestamp: new Date().toISOString(),\n            },\n          });\n        }\n        targetDate = new Date(date + 'T00:00:00.000Z');\n      }\n\n      // Check permissions (in a full implementation, might restrict to moderators)\n      const userId = context.userId;\n      if (!userId) {\n        return res.status(401).json({\n          error: {\n            code: 'AUTHENTICATION_REQUIRED',\n            message: 'User authentication required',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      console.log(`Generating daily puzzles for ${date || 'today'} (force: ${force})`);\n\n      // Generate puzzles\n      const result = await dailyPuzzleGenerator.generateDailyPuzzles(targetDate);\n\n      const response: GenerateDailyPuzzlesResponse = {\n        result,\n        timestamp: new Date().toISOString(),\n      };\n\n      // Return appropriate status code\n      const statusCode = result.success ? 200 : 500;\n      res.status(statusCode).json(response);\n\n      console.log(`Daily puzzle generation ${result.success ? 'completed' : 'failed'} in ${result.generationTime}ms`);\n    } catch (error) {\n      console.error('Daily puzzle generation request failed:', error);\n      res.status(500).json({\n        error: {\n          code: 'GENERATION_REQUEST_FAILED',\n          message: 'Failed to process puzzle generation request',\n          details: error instanceof Error ? error.message : 'Unknown error',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n  }\n);\n\n/**\n * Generate puzzles for upcoming days\n * POST /api/daily-puzzles/generate-upcoming\n */\nrouter.post<{}, GenerateUpcomingPuzzlesResponse | ErrorResponse, GenerateUpcomingPuzzlesRequest>(\n  '/api/daily-puzzles/generate-upcoming',\n  async (req: Request<{}, GenerateUpcomingPuzzlesResponse | ErrorResponse, GenerateUpcomingPuzzlesRequest>, res: Response<GenerateUpcomingPuzzlesResponse | ErrorResponse>) => {\n    try {\n      const { days = 7 } = req.body;\n\n      // Validate days parameter\n      if (typeof days !== 'number' || days < 1 || days > 30) {\n        return res.status(400).json({\n          error: {\n            code: 'INVALID_DAYS_PARAMETER',\n            message: 'Days must be a number between 1 and 30',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      // Check permissions\n      const userId = context.userId;\n      if (!userId) {\n        return res.status(401).json({\n          error: {\n            code: 'AUTHENTICATION_REQUIRED',\n            message: 'User authentication required',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      console.log(`Generating puzzles for the next ${days} days`);\n\n      // Generate upcoming puzzles\n      const result = await dailyPuzzleGenerator.generateUpcomingPuzzles(days);\n\n      const response: GenerateUpcomingPuzzlesResponse = {\n        ...result,\n        timestamp: new Date().toISOString(),\n      };\n\n      res.status(200).json(response);\n\n      console.log(`Upcoming puzzle generation completed: ${result.successful}/${days} successful`);\n    } catch (error) {\n      console.error('Upcoming puzzle generation failed:', error);\n      res.status(500).json({\n        error: {\n          code: 'UPCOMING_GENERATION_FAILED',\n          message: 'Failed to generate upcoming puzzles',\n          details: error instanceof Error ? error.message : 'Unknown error',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n  }\n);\n\n/**\n * Schedule daily puzzle generation\n * POST /api/daily-puzzles/schedule\n */\nrouter.post('/api/daily-puzzles/schedule', async (req: Request, res: Response) => {\n  try {\n    // Check permissions (typically restricted to app administrators)\n    const userId = context.userId;\n    if (!userId) {\n      return res.status(401).json({\n        error: {\n          code: 'AUTHENTICATION_REQUIRED',\n          message: 'User authentication required',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n\n    console.log('Scheduling daily puzzle generation');\n\n    // Schedule daily generation\n    const jobId = await dailyPuzzleGenerator.scheduleDailyGeneration();\n    const config = dailyPuzzleGenerator.getConfig();\n\n    const response: ScheduleGenerationResponse = {\n      jobId,\n      schedule: config.scheduledGenerationTime,\n      message: 'Daily puzzle generation scheduled successfully',\n      timestamp: new Date().toISOString(),\n    };\n\n    res.status(200).json(response);\n\n    console.log(`Scheduled daily puzzle generation with job ID: ${jobId}`);\n  } catch (error) {\n    console.error('Failed to schedule daily puzzle generation:', error);\n    res.status(500).json({\n      error: {\n        code: 'SCHEDULE_FAILED',\n        message: 'Failed to schedule daily puzzle generation',\n        details: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      },\n    });\n  }\n});\n\n/**\n * Get scheduled generation jobs\n * GET /api/daily-puzzles/scheduled-jobs\n */\nrouter.get('/api/daily-puzzles/scheduled-jobs', async (req: Request, res: Response) => {\n  try {\n    // Check permissions\n    const userId = context.userId;\n    if (!userId) {\n      return res.status(401).json({\n        error: {\n          code: 'AUTHENTICATION_REQUIRED',\n          message: 'User authentication required',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n\n    // Get scheduled jobs\n    const jobs = await dailyPuzzleGenerator.getScheduledJobs();\n\n    res.status(200).json({\n      jobs,\n      count: jobs.length,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    console.error('Failed to get scheduled jobs:', error);\n    res.status(500).json({\n      error: {\n        code: 'SCHEDULED_JOBS_FETCH_FAILED',\n        message: 'Failed to retrieve scheduled jobs',\n        details: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      },\n    });\n  }\n});\n\n/**\n * Cancel scheduled generation job\n * DELETE /api/daily-puzzles/schedule/:jobId\n */\nrouter.delete<{ jobId: string }>(\n  '/api/daily-puzzles/schedule/:jobId',\n  async (req: Request<{ jobId: string }>, res: Response) => {\n    try {\n      const { jobId } = req.params;\n\n      if (!jobId || jobId.trim().length === 0) {\n        return res.status(400).json({\n          error: {\n            code: 'INVALID_JOB_ID',\n            message: 'Job ID is required',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      // Check permissions\n      const userId = context.userId;\n      if (!userId) {\n        return res.status(401).json({\n          error: {\n            code: 'AUTHENTICATION_REQUIRED',\n            message: 'User authentication required',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      // Cancel scheduled job\n      await dailyPuzzleGenerator.cancelScheduledGeneration(jobId);\n\n      res.status(200).json({\n        success: true,\n        message: `Cancelled scheduled generation job: ${jobId}`,\n        timestamp: new Date().toISOString(),\n      });\n\n      console.log(`Cancelled scheduled puzzle generation: ${jobId}`);\n    } catch (error) {\n      console.error('Failed to cancel scheduled generation:', error);\n      res.status(500).json({\n        error: {\n          code: 'CANCEL_SCHEDULE_FAILED',\n          message: 'Failed to cancel scheduled generation',\n          details: error instanceof Error ? error.message : 'Unknown error',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n  }\n);\n\n/**\n * Get generation statistics\n * GET /api/daily-puzzles/stats\n */\nrouter.get('/api/daily-puzzles/stats', async (req: Request, res: Response) => {\n  try {\n    // Get generation statistics\n    const stats = await dailyPuzzleGenerator.getGenerationStats();\n\n    const response: GetGenerationStatsResponse = {\n      stats,\n      timestamp: new Date().toISOString(),\n    };\n\n    res.status(200).json(response);\n  } catch (error) {\n    console.error('Failed to get generation stats:', error);\n    res.status(500).json({\n      error: {\n        code: 'GENERATION_STATS_FAILED',\n        message: 'Failed to retrieve generation statistics',\n        details: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      },\n    });\n  }\n});\n\n/**\n * Get daily puzzle set for a specific date\n * GET /api/daily-puzzles/:date\n */\nrouter.get<{ date: string }>(\n  '/api/daily-puzzles/:date',\n  async (req: Request<{ date: string }>, res: Response) => {\n    try {\n      const { date } = req.params;\n\n      // Validate date format\n      const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n      if (!dateRegex.test(date)) {\n        return res.status(400).json({\n          error: {\n            code: 'INVALID_DATE_FORMAT',\n            message: 'Date must be in YYYY-MM-DD format',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      // This endpoint uses the existing Redis route\n      // Redirect to the Redis daily puzzle endpoint\n      return res.redirect(`/api/daily/${date}`);\n    } catch (error) {\n      console.error('Failed to get daily puzzle set:', error);\n      res.status(500).json({\n        error: {\n          code: 'DAILY_PUZZLE_FETCH_FAILED',\n          message: 'Failed to retrieve daily puzzle set',\n          details: error instanceof Error ? error.message : 'Unknown error',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n  }\n);\n\n/**\n * Get generator configuration\n * GET /api/daily-puzzles/config\n */\nrouter.get('/api/daily-puzzles/config', async (req: Request, res: Response) => {\n  try {\n    const config = dailyPuzzleGenerator.getConfig();\n\n    res.status(200).json({\n      config,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    console.error('Failed to get generator config:', error);\n    res.status(500).json({\n      error: {\n        code: 'CONFIG_FETCH_FAILED',\n        message: 'Failed to retrieve generator configuration',\n        details: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      },\n    });\n  }\n});\n\n/**\n * Update generator configuration\n * PUT /api/daily-puzzles/config\n */\nrouter.put('/api/daily-puzzles/config', async (req: Request, res: Response) => {\n  try {\n    const newConfig = req.body;\n\n    // Check permissions (typically restricted to administrators)\n    const userId = context.userId;\n    if (!userId) {\n      return res.status(401).json({\n        error: {\n          code: 'AUTHENTICATION_REQUIRED',\n          message: 'User authentication required',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n\n    // Validate configuration\n    if (newConfig.maxGenerationAttempts && (newConfig.maxGenerationAttempts < 1 || newConfig.maxGenerationAttempts > 100)) {\n      return res.status(400).json({\n        error: {\n          code: 'INVALID_CONFIG',\n          message: 'maxGenerationAttempts must be between 1 and 100',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n\n    if (newConfig.generationTimeoutMs && (newConfig.generationTimeoutMs < 1000 || newConfig.generationTimeoutMs > 30000)) {\n      return res.status(400).json({\n        error: {\n          code: 'INVALID_CONFIG',\n          message: 'generationTimeoutMs must be between 1000 and 30000',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n\n    // Update configuration\n    dailyPuzzleGenerator.updateConfig(newConfig);\n    const updatedConfig = dailyPuzzleGenerator.getConfig();\n\n    res.status(200).json({\n      config: updatedConfig,\n      message: 'Configuration updated successfully',\n      timestamp: new Date().toISOString(),\n    });\n\n    console.log('Updated daily puzzle generator configuration');\n  } catch (error) {\n    console.error('Failed to update generator config:', error);\n    res.status(500).json({\n      error: {\n        code: 'CONFIG_UPDATE_FAILED',\n        message: 'Failed to update generator configuration',\n        details: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      },\n    });\n  }\n});\n\n/**\n * Health check for daily puzzle generator\n * GET /api/daily-puzzles/health\n */\nrouter.get('/api/daily-puzzles/health', async (req: Request, res: Response) => {\n  try {\n    // Test basic functionality\n    const config = dailyPuzzleGenerator.getConfig();\n    const stats = await dailyPuzzleGenerator.getGenerationStats();\n    const scheduledJobs = await dailyPuzzleGenerator.getScheduledJobs();\n    \n    const isHealthy = config && typeof stats.totalPuzzlesGenerated === 'number';\n\n    res.status(200).json({\n      status: isHealthy ? 'healthy' : 'degraded',\n      timestamp: new Date().toISOString(),\n      version: '1.0.0',\n      services: {\n        dailyPuzzleGenerator: isHealthy ? 'operational' : 'error',\n        scheduler: 'operational', // Assume operational unless we can test\n        puzzleGeneration: isHealthy ? 'operational' : 'error',\n      },\n      config: {\n        maxGenerationAttempts: config.maxGenerationAttempts,\n        scheduledGenerationTime: config.scheduledGenerationTime,\n        generationTimeoutMs: config.generationTimeoutMs,\n      },\n      scheduledJobs: scheduledJobs.length,\n      stats,\n    });\n  } catch (error) {\n    console.error('Daily puzzle generator health check failed:', error);\n    res.status(503).json({\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : 'Unknown error',\n    });\n  }\n});\n\nexport default router;"
