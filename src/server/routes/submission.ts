// Game submission API routes following Devvit Web patterns\n// All endpoints must start with /api/ as per Devvit requirements\n\nimport express from 'express';\nimport type { Request, Response } from 'express';\nimport { GameSubmission } from '../services/GameSubmission.js';\nimport { context } from '@devvit/web/server';\nimport type {\n  AnswerSubmission,\n  SubmissionResult,\n} from '../services/GameSubmission.js';\nimport type {\n  Coordinate,\n  DifficultyLevel,\n} from '../../shared/types/index.js';\n\n// Initialize game submission service\nconst gameSubmission = new GameSubmission();\n\nconst router = express.Router();\n\n// Request/Response type definitions\ninterface SubmitAnswerRequest {\n  sessionId: string;\n  puzzleId: string;\n  answer: Coordinate;\n  timeElapsed: number;\n  hintsUsed: number;\n}\n\ninterface SubmitAnswerResponse {\n  result: SubmissionResult;\n  timestamp: string;\n}\n\ninterface CheckSubmissionEligibilityRequest {\n  userId?: string;\n  puzzleId: string;\n}\n\ninterface CheckSubmissionEligibilityResponse {\n  canSubmit: boolean;\n  reason?: string;\n  cooldownRemaining?: number;\n  timestamp: string;\n}\n\ninterface GetUserStatsRequest {\n  userId: string;\n}\n\ninterface GetUserStatsResponse {\n  stats: {\n    totalSubmissions: number;\n    correctSubmissions: number;\n    averageScore: number;\n    bestScore: number;\n    favoritedifficulty: DifficultyLevel;\n    streakCount: number;\n  };\n  timestamp: string;\n}\n\ninterface ErrorResponse {\n  error: {\n    code: string;\n    message: string;\n    details?: any;\n    timestamp: string;\n  };\n}\n\n/**\n * Submit answer for puzzle validation and scoring\n * POST /api/submission/submit\n */\nrouter.post<{}, SubmitAnswerResponse | ErrorResponse, SubmitAnswerRequest>(\n  '/api/submission/submit',\n  async (req: Request<{}, SubmitAnswerResponse | ErrorResponse, SubmitAnswerRequest>, res: Response<SubmitAnswerResponse | ErrorResponse>) => {\n    try {\n      const { sessionId, puzzleId, answer, timeElapsed, hintsUsed } = req.body;\n\n      // Validate required fields\n      if (!sessionId || !puzzleId || !answer) {\n        return res.status(400).json({\n          error: {\n            code: 'MISSING_REQUIRED_FIELDS',\n            message: 'sessionId, puzzleId, and answer are required',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      // Validate numeric fields\n      if (typeof timeElapsed !== 'number' || timeElapsed < 0) {\n        return res.status(400).json({\n          error: {\n            code: 'INVALID_TIME_ELAPSED',\n            message: 'timeElapsed must be a non-negative number',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      if (typeof hintsUsed !== 'number' || hintsUsed < 0 || hintsUsed > 4) {\n        return res.status(400).json({\n          error: {\n            code: 'INVALID_HINTS_USED',\n            message: 'hintsUsed must be between 0 and 4',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      // Validate answer coordinate\n      if (typeof answer.row !== 'number' || typeof answer.col !== 'number') {\n        return res.status(400).json({\n          error: {\n            code: 'INVALID_ANSWER_COORDINATE',\n            message: 'answer must contain valid row and col numbers',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      // Get user context from Devvit\n      const userId = context.userId;\n      if (!userId) {\n        return res.status(401).json({\n          error: {\n            code: 'USER_NOT_AUTHENTICATED',\n            message: 'User authentication required',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      // Check if user can submit\n      const eligibility = await gameSubmission.canUserSubmit(userId, puzzleId);\n      if (!eligibility.canSubmit) {\n        return res.status(429).json({\n          error: {\n            code: 'SUBMISSION_NOT_ALLOWED',\n            message: eligibility.reason || 'Submission not allowed at this time',\n            details: eligibility.cooldownRemaining ? {\n              cooldownRemaining: eligibility.cooldownRemaining,\n            } : undefined,\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      // Create submission object\n      const submission: AnswerSubmission = {\n        sessionId,\n        puzzleId,\n        answer,\n        timeElapsed,\n        hintsUsed,\n        userId,\n      };\n\n      // Process submission\n      const result = await gameSubmission.processSubmission(submission);\n\n      const response: SubmitAnswerResponse = {\n        result,\n        timestamp: new Date().toISOString(),\n      };\n\n      // Return appropriate status code based on result\n      const statusCode = result.isCorrect ? 200 : 200; // Always 200 for valid submissions\n      res.status(statusCode).json(response);\n\n      console.log(`Submission processed for user ${userId}: ${result.isCorrect ? 'CORRECT' : 'INCORRECT'} (${result.score.finalScore} points)`);\n    } catch (error) {\n      console.error('Submission processing failed:', error);\n      \n      // Handle specific error types\n      if (error instanceof Error) {\n        if (error.message.includes('not found')) {\n          return res.status(404).json({\n            error: {\n              code: 'RESOURCE_NOT_FOUND',\n              message: error.message,\n              timestamp: new Date().toISOString(),\n            },\n          });\n        }\n        \n        if (error.message.includes('Invalid submission')) {\n          return res.status(400).json({\n            error: {\n              code: 'INVALID_SUBMISSION',\n              message: error.message,\n              timestamp: new Date().toISOString(),\n            },\n          });\n        }\n      }\n      \n      res.status(500).json({\n        error: {\n          code: 'SUBMISSION_PROCESSING_FAILED',\n          message: 'Failed to process submission. Please try again.',\n          details: error instanceof Error ? error.message : 'Unknown error',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n  }\n);\n\n/**\n * Check if user can submit answer (eligibility check)\n * GET /api/submission/eligibility/:puzzleId\n */\nrouter.get<{ puzzleId: string }, CheckSubmissionEligibilityResponse | ErrorResponse>(\n  '/api/submission/eligibility/:puzzleId',\n  async (req: Request<{ puzzleId: string }>, res: Response<CheckSubmissionEligibilityResponse | ErrorResponse>) => {\n    try {\n      const { puzzleId } = req.params;\n\n      if (!puzzleId || puzzleId.trim().length === 0) {\n        return res.status(400).json({\n          error: {\n            code: 'INVALID_PUZZLE_ID',\n            message: 'Puzzle ID is required',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      // Get user context from Devvit\n      const userId = context.userId;\n      if (!userId) {\n        return res.status(401).json({\n          error: {\n            code: 'USER_NOT_AUTHENTICATED',\n            message: 'User authentication required',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      // Check submission eligibility\n      const eligibility = await gameSubmission.canUserSubmit(userId, puzzleId);\n\n      const response: CheckSubmissionEligibilityResponse = {\n        canSubmit: eligibility.canSubmit,\n        reason: eligibility.reason,\n        cooldownRemaining: eligibility.cooldownRemaining,\n        timestamp: new Date().toISOString(),\n      };\n\n      res.status(200).json(response);\n    } catch (error) {\n      console.error('Failed to check submission eligibility:', error);\n      res.status(500).json({\n        error: {\n          code: 'ELIGIBILITY_CHECK_FAILED',\n          message: 'Failed to check submission eligibility',\n          details: error instanceof Error ? error.message : 'Unknown error',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n  }\n);\n\n/**\n * Get user submission statistics\n * GET /api/submission/stats/:userId\n */\nrouter.get<{ userId: string }, GetUserStatsResponse | ErrorResponse>(\n  '/api/submission/stats/:userId',\n  async (req: Request<{ userId: string }>, res: Response<GetUserStatsResponse | ErrorResponse>) => {\n    try {\n      const { userId } = req.params;\n\n      if (!userId || userId.trim().length === 0) {\n        return res.status(400).json({\n          error: {\n            code: 'INVALID_USER_ID',\n            message: 'User ID is required',\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      // Optional: Check if requesting user can access these stats\n      const requestingUserId = context.userId;\n      if (requestingUserId !== userId) {\n        // In a full implementation, you might want to restrict access\n        // For now, we'll allow access to any user's public stats\n      }\n\n      // Get user submission statistics\n      const stats = await gameSubmission.getUserSubmissionStats(userId);\n\n      const response: GetUserStatsResponse = {\n        stats,\n        timestamp: new Date().toISOString(),\n      };\n\n      res.status(200).json(response);\n    } catch (error) {\n      console.error('Failed to get user submission stats:', error);\n      res.status(500).json({\n        error: {\n          code: 'USER_STATS_FETCH_FAILED',\n          message: 'Failed to retrieve user statistics',\n          details: error instanceof Error ? error.message : 'Unknown error',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n  }\n);\n\n/**\n * Get current user's submission statistics (convenience endpoint)\n * GET /api/submission/my-stats\n */\nrouter.get('/api/submission/my-stats', async (req: Request, res: Response) => {\n  try {\n    // Get user context from Devvit\n    const userId = context.userId;\n    if (!userId) {\n      return res.status(401).json({\n        error: {\n          code: 'USER_NOT_AUTHENTICATED',\n          message: 'User authentication required',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n\n    // Get user submission statistics\n    const stats = await gameSubmission.getUserSubmissionStats(userId);\n\n    const response: GetUserStatsResponse = {\n      stats,\n      timestamp: new Date().toISOString(),\n    };\n\n    res.status(200).json(response);\n  } catch (error) {\n    console.error('Failed to get current user stats:', error);\n    res.status(500).json({\n      error: {\n        code: 'USER_STATS_FETCH_FAILED',\n        message: 'Failed to retrieve your statistics',\n        details: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      },\n    });\n  }\n});\n\n/**\n * Validate submission data (dry run)\n * POST /api/submission/validate\n */\nrouter.post<{}, any, SubmitAnswerRequest>(\n  '/api/submission/validate',\n  async (req: Request<{}, any, SubmitAnswerRequest>, res: Response) => {\n    try {\n      const { sessionId, puzzleId, answer, timeElapsed, hintsUsed } = req.body;\n\n      // Create submission object for validation\n      const submission: AnswerSubmission = {\n        sessionId,\n        puzzleId,\n        answer,\n        timeElapsed,\n        hintsUsed,\n        userId: context.userId || 'test-user',\n      };\n\n      // Validate submission without processing\n      const validation = gameSubmission.validateSubmission(submission);\n\n      res.status(200).json({\n        validation,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      console.error('Failed to validate submission:', error);\n      res.status(500).json({\n        error: {\n          code: 'VALIDATION_FAILED',\n          message: 'Failed to validate submission data',\n          details: error instanceof Error ? error.message : 'Unknown error',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n  }\n);\n\n/**\n * Health check for submission service\n * GET /api/submission/health\n */\nrouter.get('/api/submission/health', async (req: Request, res: Response) => {\n  try {\n    // Test basic service functionality\n    const testSubmission: AnswerSubmission = {\n      sessionId: 'health-check',\n      puzzleId: 'health-check',\n      answer: { row: 0, col: 0, label: 'A1' },\n      timeElapsed: 60000,\n      hintsUsed: 0,\n      userId: 'health-check',\n    };\n\n    const validation = gameSubmission.validateSubmission(testSubmission);\n    const isHealthy = validation.isValid;\n\n    res.status(200).json({\n      status: isHealthy ? 'healthy' : 'degraded',\n      timestamp: new Date().toISOString(),\n      version: '1.0.0',\n      services: {\n        gameSubmission: isHealthy ? 'operational' : 'error',\n        validation: isHealthy ? 'operational' : 'error',\n      },\n      checks: {\n        validation: validation.isValid,\n        errors: validation.errors,\n      },\n    });\n  } catch (error) {\n    console.error('Submission service health check failed:', error);\n    res.status(503).json({\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : 'Unknown error',\n    });\n  }\n});\n\nexport default router;"
