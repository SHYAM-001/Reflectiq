// Scheduler endpoint handlers following Devvit Web patterns\n// Handles scheduled tasks triggered by Devvit's scheduler system\n\nimport express from 'express';\nimport type { Request, Response } from 'express';\nimport { DailyPuzzleGenerator } from '../services/DailyPuzzleGenerator.js';\nimport { LeaderboardIntegration } from '../services/LeaderboardIntegration.js';\nimport { RedisManager } from '../services/RedisManager.js';\n\n// Initialize services\nconst dailyPuzzleGenerator = new DailyPuzzleGenerator();\nconst leaderboardIntegration = new LeaderboardIntegration();\nconst redisManager = new RedisManager();\n\nconst router = express.Router();\n\n// Scheduler request body interface\ninterface SchedulerRequest {\n  type: string;\n  config?: any;\n  data?: any;\n}\n\n/**\n * Daily puzzle generation scheduler endpoint\n * POST /internal/scheduler/daily-puzzle-generation\n * \n * This endpoint is called by Devvit's scheduler system\n * Must follow the /internal/ pattern as per Devvit requirements\n */\nrouter.post(\n  '/internal/scheduler/daily-puzzle-generation',\n  async (req: Request<{}, any, SchedulerRequest>, res: Response) => {\n    const startTime = Date.now();\n    \n    try {\n      console.log(`Daily puzzle generation scheduler triggered at ${new Date().toISOString()}`);\n      \n      // Generate today's puzzles\n      const result = await dailyPuzzleGenerator.generateDailyPuzzles();\n      \n      const executionTime = Date.now() - startTime;\n      \n      if (result.success) {\n        console.log(`Daily puzzle generation completed successfully in ${executionTime}ms`);\n        console.log(`Generated puzzles: Easy (${result.uniquenessChecks.easy ? 'unique' : 'similar'}), Medium (${result.uniquenessChecks.medium ? 'unique' : 'similar'}), Hard (${result.uniquenessChecks.hard ? 'unique' : 'similar'})`);\n        \n        res.status(200).json({\n          status: 'success',\n          message: 'Daily puzzles generated successfully',\n          executionTime,\n          result: {\n            generationTime: result.generationTime,\n            uniquenessChecks: result.uniquenessChecks,\n            warnings: result.warnings,\n          },\n          timestamp: new Date().toISOString(),\n        });\n      } else {\n        console.error(`Daily puzzle generation failed: ${result.errors.join(', ')}`);\n        \n        res.status(500).json({\n          status: 'error',\n          message: 'Daily puzzle generation failed',\n          executionTime,\n          errors: result.errors,\n          warnings: result.warnings,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      console.error('Daily puzzle generation scheduler failed:', error);\n      \n      res.status(500).json({\n        status: 'error',\n        message: 'Scheduler execution failed',\n        executionTime,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n);\n\n/**\n * Weekly puzzle cleanup scheduler endpoint\n * POST /internal/scheduler/weekly-cleanup\n * \n * Cleans up old puzzle data and expired sessions\n */\nrouter.post(\n  '/internal/scheduler/weekly-cleanup',\n  async (req: Request<{}, any, SchedulerRequest>, res: Response) => {\n    const startTime = Date.now();\n    \n    try {\n      console.log(`Weekly cleanup scheduler triggered at ${new Date().toISOString()}`);\n      \n      // Perform cleanup operations\n      await redisManager.cleanupExpiredData();\n      \n      // Additional cleanup operations could be added here:\n      // - Remove old puzzle hashes\n      // - Archive old leaderboard data\n      // - Clean up expired game sessions\n      \n      const executionTime = Date.now() - startTime;\n      \n      console.log(`Weekly cleanup completed in ${executionTime}ms`);\n      \n      res.status(200).json({\n        status: 'success',\n        message: 'Weekly cleanup completed successfully',\n        executionTime,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      console.error('Weekly cleanup scheduler failed:', error);\n      \n      res.status(500).json({\n        status: 'error',\n        message: 'Weekly cleanup failed',\n        executionTime,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n);\n\n/**\n * Leaderboard statistics update scheduler endpoint\n * POST /internal/scheduler/leaderboard-stats-update\n * \n * Updates cached leaderboard statistics\n */\nrouter.post(\n  '/internal/scheduler/leaderboard-stats-update',\n  async (req: Request<{}, any, SchedulerRequest>, res: Response) => {\n    const startTime = Date.now();\n    \n    try {\n      console.log(`Leaderboard stats update scheduler triggered at ${new Date().toISOString()}`);\n      \n      // Update statistics for all difficulties\n      const difficulties = ['easy', 'medium', 'hard'] as const;\n      const results = [];\n      \n      for (const difficulty of difficulties) {\n        try {\n          const stats = await leaderboardIntegration.getLeaderboardStats(difficulty);\n          results.push({\n            difficulty,\n            totalPlayers: stats.totalPlayers,\n            topScore: stats.topScore,\n            success: true,\n          });\n        } catch (error) {\n          console.error(`Failed to update stats for ${difficulty}:`, error);\n          results.push({\n            difficulty,\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error',\n          });\n        }\n      }\n      \n      const executionTime = Date.now() - startTime;\n      const successCount = results.filter(r => r.success).length;\n      \n      console.log(`Leaderboard stats update completed: ${successCount}/${difficulties.length} successful in ${executionTime}ms`);\n      \n      res.status(200).json({\n        status: 'success',\n        message: `Updated statistics for ${successCount}/${difficulties.length} difficulties`,\n        executionTime,\n        results,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      console.error('Leaderboard stats update scheduler failed:', error);\n      \n      res.status(500).json({\n        status: 'error',\n        message: 'Leaderboard stats update failed',\n        executionTime,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n);\n\n/**\n * Puzzle pre-generation scheduler endpoint\n * POST /internal/scheduler/puzzle-pre-generation\n * \n * Pre-generates puzzles for upcoming days\n */\nrouter.post(\n  '/internal/scheduler/puzzle-pre-generation',\n  async (req: Request<{}, any, SchedulerRequest>, res: Response) => {\n    const startTime = Date.now();\n    \n    try {\n      console.log(`Puzzle pre-generation scheduler triggered at ${new Date().toISOString()}`);\n      \n      // Pre-generate puzzles for the next 3 days\n      const daysAhead = 3;\n      const result = await dailyPuzzleGenerator.generateUpcomingPuzzles(daysAhead);\n      \n      const executionTime = Date.now() - startTime;\n      \n      console.log(`Puzzle pre-generation completed: ${result.successful}/${daysAhead} successful in ${executionTime}ms`);\n      \n      res.status(200).json({\n        status: 'success',\n        message: `Pre-generated puzzles for ${result.successful}/${daysAhead} days`,\n        executionTime,\n        successful: result.successful,\n        failed: result.failed,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      console.error('Puzzle pre-generation scheduler failed:', error);\n      \n      res.status(500).json({\n        status: 'error',\n        message: 'Puzzle pre-generation failed',\n        executionTime,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n);\n\n/**\n * Health check for all scheduled tasks\n * POST /internal/scheduler/health-check\n * \n * Performs health checks on all services\n */\nrouter.post(\n  '/internal/scheduler/health-check',\n  async (req: Request<{}, any, SchedulerRequest>, res: Response) => {\n    const startTime = Date.now();\n    \n    try {\n      console.log(`Scheduler health check triggered at ${new Date().toISOString()}`);\n      \n      // Perform health checks\n      const healthChecks = {\n        dailyPuzzleGenerator: false,\n        leaderboardIntegration: false,\n        redisManager: false,\n      };\n      \n      // Test daily puzzle generator\n      try {\n        const config = dailyPuzzleGenerator.getConfig();\n        healthChecks.dailyPuzzleGenerator = !!config;\n      } catch (error) {\n        console.error('Daily puzzle generator health check failed:', error);\n      }\n      \n      // Test leaderboard integration\n      try {\n        const stats = await leaderboardIntegration.getLeaderboardStats('easy');\n        healthChecks.leaderboardIntegration = !!stats;\n      } catch (error) {\n        console.error('Leaderboard integration health check failed:', error);\n      }\n      \n      // Test Redis manager\n      try {\n        const stats = await redisManager.getRedisStats();\n        healthChecks.redisManager = !!stats;\n      } catch (error) {\n        console.error('Redis manager health check failed:', error);\n      }\n      \n      const executionTime = Date.now() - startTime;\n      const healthyServices = Object.values(healthChecks).filter(Boolean).length;\n      const totalServices = Object.keys(healthChecks).length;\n      \n      console.log(`Health check completed: ${healthyServices}/${totalServices} services healthy in ${executionTime}ms`);\n      \n      res.status(200).json({\n        status: healthyServices === totalServices ? 'healthy' : 'degraded',\n        message: `${healthyServices}/${totalServices} services are healthy`,\n        executionTime,\n        healthChecks,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      console.error('Scheduler health check failed:', error);\n      \n      res.status(500).json({\n        status: 'error',\n        message: 'Health check failed',\n        executionTime,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n);\n\n/**\n * Generic scheduler endpoint for testing\n * POST /internal/scheduler/test\n * \n * Used for testing scheduler functionality\n */\nrouter.post(\n  '/internal/scheduler/test',\n  async (req: Request<{}, any, SchedulerRequest>, res: Response) => {\n    const startTime = Date.now();\n    \n    try {\n      console.log(`Test scheduler triggered at ${new Date().toISOString()}`);\n      console.log('Request data:', req.body);\n      \n      // Simulate some work\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const executionTime = Date.now() - startTime;\n      \n      console.log(`Test scheduler completed in ${executionTime}ms`);\n      \n      res.status(200).json({\n        status: 'success',\n        message: 'Test scheduler executed successfully',\n        executionTime,\n        requestData: req.body,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      console.error('Test scheduler failed:', error);\n      \n      res.status(500).json({\n        status: 'error',\n        message: 'Test scheduler failed',\n        executionTime,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n);\n\nexport default router;"
